{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredComment","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","onAddedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","params","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/3.3f2e8e40.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useRef, useEffect } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredComment = commentTextRef.current.value;\n    sendRequest({commentData:{ text: enteredComment}, quoteId: props.quoteId })\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && <div className='centered'><LoadingSpinner></LoadingSpinner></div>}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect,useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport CommentsList from './CommentsList';\n\n\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { quoteId } = params\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n  \n  useEffect(() => {\n    sendRequest(quoteId)\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const onAddedCommentHandler = useCallback(() => {\n   sendRequest(quoteId)\n  },[sendRequest,quoteId]);\n  let comments;\n  if (status === 'pending') {\n    comments = <div className='centered'><LoadingSpinner></LoadingSpinner></div>\n  }\n\n  if (status === 'completed' && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments}></CommentsList>\n  }\n\n  if (status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n    comments = <p className='centered'>No comments</p>\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={onAddedCommentHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect } from \"react\";\nimport { Route, useParams, useRouteMatch } from \"react-router-dom\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport Comments from '../components/comments/Comments'\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport { Link } from \"react-router-dom\";\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from '../lib/api'\n\nconst QuoteDetail = () => {\n    const params = useParams();\n    const match = useRouteMatch();\n    const { sendRequest, status, data: loadedQuote, error } = useHttp(getSingleQuote, true);\n    const { quoteId } = params;\n    useEffect(() => {\n        sendRequest(quoteId);\n    }, [sendRequest, quoteId]);\n\n    if (status === 'pending') {\n        return <LoadingSpinner></LoadingSpinner>\n    }\n\n    if (error) {\n        return <p className='centered'>error</p>\n    }\n\n    if (!loadedQuote.text) {\n        return <p>No Quote Found</p>\n    }\n\n\n    return (<Fragment>\n        <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author}></HighlightedQuote>\n        <Route path={`${match.path}`} exact>\n            <div className='centered'> <Link className='btn--flat' to={`${match.url}/comments`}>Load Comments</Link></div>\n        </Route>\n        <Route path={`${match.path}/comments`}>\n            <Comments>Comment</Comments>\n        </Route>\n    </Fragment>);\n}\n\nexport default QuoteDetail;"],"sourceRoot":""}