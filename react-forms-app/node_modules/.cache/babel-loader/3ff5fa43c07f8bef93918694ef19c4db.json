{"ast":null,"code":"var _jsxFileName = \"/Users/saifaliansari/workspace/react-projects/react-forms-app/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    hasError: nameInputHasError,\n    isValid: enteredNameIsValid,\n    reset: resetNameInput,\n    valueChangeHandler: nameInputChangeHandler,\n    inputBlurHandler: nameInputBlurHandler\n  } = useInput(value => value.trim() !== '');\n  const {\n    value: enteredEmail,\n    hasError: emailInputHasError,\n    isValid: enteredEmailIsValid,\n    reset: resetEmailInput,\n    valueChangeHandler: emailInputChangeHandler,\n    inputBlurHandler: emailInputBlurHandler\n  } = useInput(value => value.trim() !== '' && value.includes('@'));\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n\n    resetNameInput();\n    setEnteredEmail('');\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputHasError ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        value: enteredName,\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        value: enteredEmail,\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"7YrgKuNtbaRA8QH3gQmHE1VkEMA=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/saifaliansari/workspace/react-projects/react-forms-app/src/components/SimpleInput.js"],"names":["useState","useInput","SimpleInput","props","value","enteredName","hasError","nameInputHasError","isValid","enteredNameIsValid","reset","resetNameInput","valueChangeHandler","nameInputChangeHandler","inputBlurHandler","nameInputBlurHandler","trim","enteredEmail","emailInputHasError","enteredEmailIsValid","resetEmailInput","emailInputChangeHandler","emailInputBlurHandler","includes","formIsValid","formSubmissionHandler","event","preventDefault","setEnteredEmail","setEnteredEmailTouched","nameInputClasses","emailInputClasses","emailInputIsInvalid"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\nconst SimpleInput = (props) => {\n  const { value: enteredName,\n    hasError: nameInputHasError,\n    isValid: enteredNameIsValid,\n    reset: resetNameInput,\n    valueChangeHandler: nameInputChangeHandler,\n    inputBlurHandler: nameInputBlurHandler } = useInput(value => value.trim() !== '');\n\n\n  const { value: enteredEmail,\n    hasError: emailInputHasError,\n    isValid: enteredEmailIsValid,\n    reset: resetEmailInput,\n    valueChangeHandler: emailInputChangeHandler,\n    inputBlurHandler: emailInputBlurHandler } = useInput(value => value.trim() !== '' && value.includes('@'));\n\n  let formIsValid = false;\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n    resetNameInput();\n\n    setEnteredEmail('');\n\n    setEnteredEmailTouched(false);\n  }\n  const nameInputClasses = nameInputHasError ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputIsInvalid ? 'form-control invalid' : 'form-control';\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses} >\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name' value={enteredName} onChange={nameInputChangeHandler} onBlur={nameInputBlurHandler} />\n        {nameInputHasError && <p className=\"error-text\">Name must not be empty</p>}\n      </div>\n      <div className={emailInputClasses} >\n        <label htmlFor='email'>Your Email</label>\n        <input type='email' id='email' value={enteredEmail} onChange={emailInputChangeHandler} onBlur={emailInputBlurHandler} />\n        {emailInputIsInvalid && <p className=\"error-text\">Email must not be empty</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}