{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useInput = validateValue => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState('');\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = event => {\n    setEnteredValue(event.target.value);\n  };\n\n  const inputBlurHandler = event => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    setIsTouched(false);\n    setEnteredValue('');\n  };\n\n  return {\n    value: enteredValue,\n    hasError: hasError,\n    isValid: valueIsValid,\n    valueChangeHandler: valueChangeHandler,\n    inputBlurHandler: inputBlurHandler\n  };\n};\n\n_s(useInput, \"uN9KnldpqRIT2LwByiGz+Mp8wEw=\");\n\nexport default useInput;","map":{"version":3,"sources":["/Users/saifaliansari/workspace/react-projects/react-forms-app/src/hooks/use-input.js"],"names":["useState","useInput","validateValue","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","hasError","valueChangeHandler","event","target","value","inputBlurHandler","reset","isValid"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAChC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMO,YAAY,GAAGL,aAAa,CAACC,YAAD,CAAlC;AACA,QAAMK,QAAQ,GAAG,CAACD,YAAD,IAAiBF,SAAlC;;AAEA,QAAMI,kBAAkB,GAAGC,KAAK,IAAI;AAChCN,IAAAA,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AAEH,GAHD;;AAIA,QAAMC,gBAAgB,GAAGH,KAAK,IAAI;AAC9BJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAFD;;AAIA,QAAMQ,KAAK,GAAG,MAAI;AACdR,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,IAAAA,eAAe,CAAC,EAAD,CAAf;AACH,GAHD;;AAKA,SAAO;AACHQ,IAAAA,KAAK,EAAET,YADJ;AAEHK,IAAAA,QAAQ,EAAEA,QAFP;AAGHO,IAAAA,OAAO,EAAGR,YAHP;AAIHE,IAAAA,kBAAkB,EAAEA,kBAJjB;AAKHI,IAAAA,gBAAgB,EAAEA;AALf,GAAP;AAQH,CA3BD;;GAAMZ,Q;;AA6BN,eAAeA,QAAf","sourcesContent":["import { useState } from \"react\";\n\nconst useInput = (validateValue) => {\n    const [enteredValue, setEnteredValue] = useState('')\n    const [isTouched, setIsTouched] = useState(false);\n    const valueIsValid = validateValue(enteredValue);\n    const hasError = !valueIsValid && isTouched;\n\n    const valueChangeHandler = event => {\n        setEnteredValue(event.target.value);\n\n    }\n    const inputBlurHandler = event => {\n        setIsTouched(true);\n    }\n\n    const reset = ()=>{\n        setIsTouched(false);\n        setEnteredValue('');\n    }\n\n    return {\n        value: enteredValue,\n        hasError: hasError,\n        isValid : valueIsValid,\n        valueChangeHandler: valueChangeHandler,\n        inputBlurHandler: inputBlurHandler\n    }\n\n}\n\nexport default useInput;"]},"metadata":{},"sourceType":"module"}