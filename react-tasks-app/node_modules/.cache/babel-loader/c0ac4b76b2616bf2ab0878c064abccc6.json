{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\n\nconst useHttp = (requestConfig, applyData) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  }, [requestConfig, applyData]);\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n};\n\n_s(useHttp, \"FFcdbk+kTfFKRpY6eKN2uj4p9Os=\");\n\nexport default useHttp;","map":{"version":3,"sources":["/Users/saifaliansari/workspace/react-projects/react-tasks-app/src/hooks/use-http.js"],"names":["useState","useCallback","useHttp","requestConfig","applyData","isLoading","setIsLoading","error","setError","sendRequest","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAqC,OAArC;;AACA,MAAMC,OAAO,GAAG,CAACC,aAAD,EAAgBC,SAAhB,KAA8B;AAAA;;AAC1C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMS,WAAW,GAAGR,WAAW,CAAC,YAAY;AACxCK,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACA,YAAME,QAAQ,GAAG,MAAMC,KAAK,CACxBR,aAAa,CAACS,GADU,EACL;AACnBC,QAAAA,MAAM,EAAEV,aAAa,CAACU,MAAd,GAAuBV,aAAa,CAACU,MAArC,GAA8C,KADnC;AAEnBC,QAAAA,OAAO,EAAEX,aAAa,CAACW,OAAd,GAAwBX,aAAa,CAACW,OAAtC,GAAgD,EAFtC;AAGnBC,QAAAA,IAAI,EAAEZ,aAAa,CAACY,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAed,aAAa,CAACY,IAA7B,CAArB,GAA0D;AAH7C,OADK,CAA5B;;AAQA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACH;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AACAjB,MAAAA,SAAS,CAACgB,IAAD,CAAT;AAEH,KAhBD,CAgBE,OAAOE,GAAP,EAAY;AACVd,MAAAA,QAAQ,CAACc,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACH;;AACDjB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAvB8B,EAuB7B,CAACH,aAAD,EAAeC,SAAf,CAvB6B,CAA/B;AAyBA,SAAO;AACHC,IAAAA,SADG;AAEHE,IAAAA,KAFG;AAGHE,IAAAA;AAHG,GAAP;AAKH,CAlCD;;GAAMP,O;;AAoCN,eAAeA,OAAf","sourcesContent":["import { useState ,useCallback} from \"react\";\nconst useHttp = (requestConfig, applyData) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const sendRequest = useCallback(async () => {\n        setIsLoading(true);\n        setError(null);\n        try {\n            const response = await fetch(\n                requestConfig.url, {\n                method: requestConfig.method ? requestConfig.method : 'GET',\n                headers: requestConfig.headers ? requestConfig.headers : {},\n                body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n            }\n            );\n\n            if (!response.ok) {\n                throw new Error('Request failed!');\n            }\n\n            const data = await response.json();\n            applyData(data);\n\n        } catch (err) {\n            setError(err.message || 'Something went wrong!');\n        }\n        setIsLoading(false);\n    },[requestConfig,applyData]);\n\n    return {\n        isLoading,\n        error,\n        sendRequest\n    }\n}\n\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}