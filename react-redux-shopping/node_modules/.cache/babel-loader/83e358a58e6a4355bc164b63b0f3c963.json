{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    totalAmount: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => {\n        return item.id === newItem.id;\n      });\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity = existingItem.quantity + 1;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const removeItemId = action.payload;\n      state.totalQuantity--;\n      const existingItem = state.items.find(item => {\n        return item.id === removeItemId;\n      });\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== removeItemId);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\n\nconst sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'Sending',\n      message: 'Sending Cart Data'\n    }));\n\n    const sendRequest = async () => {\n      const reponse = await fetch('https://react-http-b7ee0-default-rtdb.firebaseio.com/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify(cart)\n      });\n\n      if (!reponse.ok) {\n        throw new Error('Something went wrong');\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: 'success',\n        title: 'Success',\n        message: 'Sent Cart Data'\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error',\n        message: 'Error Sending Data'\n      }));\n    }\n\n    dispatch();\n  };\n};\n\nexport const cartAction = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/Users/saifaliansari/workspace/react-projects/react-redux-shopping/src/store/cart-slice.js"],"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","totalAmount","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","removeItemId","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","reponse","fetch","method","body","JSON","stringify","ok","Error","error","cartAction","actions"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\n\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState: {\n        items: [],\n        totalQuantity: 0,\n        totalAmount: 0\n    },\n    reducers: {\n        addItemToCart(state, action) {\n            const newItem = action.payload;\n            const existingItem = state.items.find(item => {\n                return item.id === newItem.id\n            })\n            state.totalQuantity++;\n            if (!existingItem) {\n                state.items.push({ id: newItem.id, price: newItem.price, quantity: 1, totalPrice: newItem.price, name: newItem.title })\n            } else {\n                existingItem.quantity = existingItem.quantity + 1;\n                existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n            }\n        },\n        removeItemFromCart(state, action) {\n            const removeItemId = action.payload;\n            state.totalQuantity--;\n            const existingItem = state.items.find(item => {\n                return item.id === removeItemId\n            })\n            if (existingItem.quantity === 1) {\n                state.items = state.items.filter(item => item.id !== removeItemId)\n            } else {\n                existingItem.quantity--;\n                existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n            }\n\n        }\n\n    }\n})\n\nconst sendCartData = (cart) => {\n    return async (dispatch) => {\n        dispatch(uiActions.showNotification({\n            status: 'pending',\n            title: 'Sending',\n            message: 'Sending Cart Data'\n\n        }))\n\n        const sendRequest = async ()=>{\n            const reponse = await fetch('https://react-http-b7ee0-default-rtdb.firebaseio.com/cart.json', {\n                method: 'PUT',\n                body: JSON.stringify(cart)\n            })\n            if (!reponse.ok) {\n                throw new Error('Something went wrong')\n            }\n        }\n        try{\n            await sendRequest();\n            dispatch(uiActions.showNotification({\n                status: 'success',\n                title: 'Success',\n                message: 'Sent Cart Data'\n    \n            }))\n        }catch(error){\n            dispatch(uiActions.showNotification({\n                status: 'error',\n                title: 'Error',\n                message: 'Error Sending Data'\n        \n              }))\n        }\n        \n\n        \n       \n\n        dispatch();\n    }\n}\n\nexport const cartAction = cartSlice.actions;\nexport default cartSlice;"]},"metadata":{},"sourceType":"module"}