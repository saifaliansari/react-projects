{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    replaceCart(state, action) {\n      state.items = action.payload.items;\n      state.totalQuantity = acti;\n    },\n\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => {\n        return item.id === newItem.id;\n      });\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity = existingItem.quantity + 1;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const removeItemId = action.payload;\n      state.totalQuantity--;\n      const existingItem = state.items.find(item => {\n        return item.id === removeItemId;\n      });\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== removeItemId);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const cartAction = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/Users/saifaliansari/workspace/react-projects/react-redux-shopping/src/store/cart-slice.js"],"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","reducers","replaceCart","state","action","payload","acti","addItemToCart","newItem","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","removeItemId","filter","cartAction","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC1BE,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,KAAK,EAAE,EADG;AAEVC,IAAAA,aAAa,EAAE;AAFL,GAFY;AAM1BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,CAACC,KAAD,EAAOC,MAAP,EAAc;AACjCD,MAAAA,KAAK,CAACJ,KAAN,GAAcK,MAAM,CAACC,OAAP,CAAeN,KAA7B;AACAI,MAAAA,KAAK,CAACH,aAAN,GAAsBM,IAAtB;AACS,KAJK;;AAKNC,IAAAA,aAAa,CAACJ,KAAD,EAAQC,MAAR,EAAgB;AACzB,YAAMI,OAAO,GAAGJ,MAAM,CAACC,OAAvB;AACA,YAAMI,YAAY,GAAGN,KAAK,CAACJ,KAAN,CAAYW,IAAZ,CAAiBC,IAAI,IAAI;AAC1C,eAAOA,IAAI,CAACC,EAAL,KAAYJ,OAAO,CAACI,EAA3B;AACH,OAFoB,CAArB;AAGAT,MAAAA,KAAK,CAACH,aAAN;;AACA,UAAI,CAACS,YAAL,EAAmB;AACfN,QAAAA,KAAK,CAACJ,KAAN,CAAYc,IAAZ,CAAiB;AAAED,UAAAA,EAAE,EAAEJ,OAAO,CAACI,EAAd;AAAkBE,UAAAA,KAAK,EAAEN,OAAO,CAACM,KAAjC;AAAwCC,UAAAA,QAAQ,EAAE,CAAlD;AAAqDC,UAAAA,UAAU,EAAER,OAAO,CAACM,KAAzE;AAAgFjB,UAAAA,IAAI,EAAEW,OAAO,CAACS;AAA9F,SAAjB;AACH,OAFD,MAEO;AACHR,QAAAA,YAAY,CAACM,QAAb,GAAwBN,YAAY,CAACM,QAAb,GAAwB,CAAhD;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BR,OAAO,CAACM,KAA5D;AACH;AACJ,KAjBK;;AAkBNI,IAAAA,kBAAkB,CAACf,KAAD,EAAQC,MAAR,EAAgB;AAC9B,YAAMe,YAAY,GAAGf,MAAM,CAACC,OAA5B;AACAF,MAAAA,KAAK,CAACH,aAAN;AACA,YAAMS,YAAY,GAAGN,KAAK,CAACJ,KAAN,CAAYW,IAAZ,CAAiBC,IAAI,IAAI;AAC1C,eAAOA,IAAI,CAACC,EAAL,KAAYO,YAAnB;AACH,OAFoB,CAArB;;AAGA,UAAIV,YAAY,CAACM,QAAb,KAA0B,CAA9B,EAAiC;AAC7BZ,QAAAA,KAAK,CAACJ,KAAN,GAAcI,KAAK,CAACJ,KAAN,CAAYqB,MAAZ,CAAmBT,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYO,YAAvC,CAAd;AACH,OAFD,MAEO;AACHV,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACK,KAAjE;AACH;AAEJ;;AA/BK;AANgB,CAAD,CAA7B;AA+CA,OAAO,MAAMO,UAAU,GAAGzB,SAAS,CAAC0B,OAA7B;AACP,eAAe1B,SAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState: {\n        items: [],\n        totalQuantity: 0\n    },\n    reducers: {\n        replaceCart(state,action){\nstate.items = action.payload.items;\nstate.totalQuantity = acti\n        },\n        addItemToCart(state, action) {\n            const newItem = action.payload;\n            const existingItem = state.items.find(item => {\n                return item.id === newItem.id\n            })\n            state.totalQuantity++;\n            if (!existingItem) {\n                state.items.push({ id: newItem.id, price: newItem.price, quantity: 1, totalPrice: newItem.price, name: newItem.title })\n            } else {\n                existingItem.quantity = existingItem.quantity + 1;\n                existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n            }\n        },\n        removeItemFromCart(state, action) {\n            const removeItemId = action.payload;\n            state.totalQuantity--;\n            const existingItem = state.items.find(item => {\n                return item.id === removeItemId\n            })\n            if (existingItem.quantity === 1) {\n                state.items = state.items.filter(item => item.id !== removeItemId)\n            } else {\n                existingItem.quantity--;\n                existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n            }\n\n        }\n\n    }\n})\n\n\n\n\n\n\nexport const cartAction = cartSlice.actions;\nexport default cartSlice;"]},"metadata":{},"sourceType":"module"}