{"ast":null,"code":"var _jsxFileName = \"/Users/saifaliansari/workspace/react-projects/react-auth-app/src/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet logoutTimer;\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: '',\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\nconst calculateRemainingTime = expirationTime => {\n  const currentTIme = new Date().getTime();\n  const adjustedExpirationTime = new Date(expirationTime).getTime();\n  const remainingTime = adjustedExpirationTime - currentTIme;\n  return remainingTime;\n};\n\nconst retrieveStoredToken = () => {\n  const storedToken = localStorage.get('token');\n  const storedExpirationTime = localStorage.get('expirationTime');\n  const remainingTime = calculateRemainingTime(storedExpirationTime);\n\n  if (remainingTime <= 60000) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationTime');\n    return null;\n  }\n\n  return {\n    token: storedToken,\n    duration: remainingTime\n  };\n};\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  const tokenData = retrieveStoredToken();\n  let initialToken = null;\n\n  if (tokenData.token) {\n    initialToken = tokenData.token;\n  }\n\n  const [token, setToken] = useState(initialToken);\n  const userIsLoggedIn = !!token;\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem('token');\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem('token', token);\n    localStorage.setItem('expirationTime', expirationTime);\n    const remainingTime = calculateRemainingTime(expirationTime);\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\n  };\n\n  useEffect(() => {\n    if (tokenData) {\n      conso;\n      logoutTimer = setTimeout(logoutHandler, tokenData.duration);\n    }\n  }, [tokenData]);\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AuthContextProvider, \"w4PGjzwU+znkNWWv/cmJxDZqQPE=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/saifaliansari/workspace/react-projects/react-auth-app/src/store/auth-context.js"],"names":["React","useState","useEffect","logoutTimer","AuthContext","createContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTIme","Date","getTime","adjustedExpirationTime","remainingTime","retrieveStoredToken","storedToken","localStorage","get","storedExpirationTime","removeItem","duration","AuthContextProvider","props","tokenData","initialToken","setToken","userIsLoggedIn","logoutHandler","clearTimeout","loginHandler","setItem","setTimeout","conso","contextValue","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nlet logoutTimer;\nconst AuthContext = React.createContext({\n    token: '',\n    isLoggedIn: false,\n    login: (token) => { },\n    logout: () => { }\n});\n\nconst calculateRemainingTime = (expirationTime) => {\n    const currentTIme = new Date().getTime();\n    const adjustedExpirationTime = new Date(expirationTime).getTime();\n    const remainingTime = adjustedExpirationTime - currentTIme;\n    return remainingTime;\n}\n\nconst retrieveStoredToken = () => {\n    const storedToken = localStorage.get('token');\n    const storedExpirationTime = localStorage.get('expirationTime');\n    const remainingTime = calculateRemainingTime(storedExpirationTime);\n    if (remainingTime <= 60000) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('expirationTime')\n        return null;\n    }\n    return {\n        token: storedToken,\n        duration: remainingTime\n    }\n}\n\nexport const AuthContextProvider = (props) => {\n    const tokenData = retrieveStoredToken();\n    let initialToken = null;\n    if (tokenData.token) {\n        initialToken = tokenData.token;\n    }\n    const [token, setToken] = useState(initialToken);\n    const userIsLoggedIn = !!token;\n\n    const logoutHandler = () => {\n        setToken(null)\n        localStorage.removeItem('token');\n        if (logoutTimer) {\n            clearTimeout(logoutTimer);\n        }\n    }\n\n    const loginHandler = (token, expirationTime) => {\n        setToken(token);\n        localStorage.setItem('token', token);\n        localStorage.setItem('expirationTime', expirationTime);\n        const remainingTime = calculateRemainingTime(expirationTime);\n        logoutTimer = setTimeout(logoutHandler, remainingTime);\n\n    };\n    useEffect(() => {\n        if (tokenData) {\n            conso\n            logoutTimer = setTimeout(logoutHandler, tokenData.duration);\n        }\n    }, [tokenData])\n\n\n    const contextValue = {\n        token: token,\n        isLoggedIn: userIsLoggedIn,\n        login: loginHandler,\n        logout: logoutHandler\n    }\n    return <AuthContext.Provider value={contextValue}>{props.children}</AuthContext.Provider>\n}\n\nexport default AuthContext;"]},"metadata":{},"sourceType":"module"}